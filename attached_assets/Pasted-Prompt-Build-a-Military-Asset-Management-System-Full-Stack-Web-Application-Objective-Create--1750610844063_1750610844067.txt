Prompt: Build a Military Asset Management System (Full-Stack Web Application)
Objective:

Create a secure, role-based Military Asset Management System that enables commanders and logistics personnel to manage, track, assign, and transfer critical military assets (weapons, vehicles, ammunition, etc.) across multiple bases.

✅ Core Functional Requirements
1. 📊 Dashboard:
Display key metrics:

Opening Balance per asset

Closing Balance

Net Movement = Purchases + Transfers In − Transfers Out

Assigned and Expended assets

Filter options:

Date range

Base name

Equipment type

Pop-up modal:

Clicking Net Movement opens breakdown of:

Purchases

Transfer In

Transfer Out

2. 🛒 Purchases Page:
Record new asset purchases with:

Date, Base, Equipment Type, Quantity

View and filter purchase history by:

Date

Equipment Type

3. 🔁 Transfer Page:
Allow transfer of assets between bases:

From Base, To Base, Asset Type, Quantity, Date

Display transfer history with:

Timestamps, asset metadata, and source/destination logs

4. 👷 Assignments & Expenditures Page:
Assign assets to personnel (with optional personnel ID or role)

Track assets expended (used, damaged, etc.)

Maintain logs with:

Assigned to, Assigned date, Expenditure reason/status

5. 🛡️ Role-Based Access Control (RBAC):
Admin: Full access (all data + all operations)

Base Commander: Access only to their base data and related operations

Logistics Officer: Can view and manage Purchases and Transfers but not Assignments

⚙️ Non-Functional Requirements
🌐 Frontend (React):
Use React (or Next.js) for the UI

Fully responsive, optimized for both mobile and desktop

Features smooth transitions, loading states, and user-friendly forms

Use a design library (e.g., Material-UI, TailwindCSS) for consistency

Authentication and Role-based UI rendering

🛠️ Backend:
Tech stack: Node.js + Express.js

Justification: Lightweight, performant, good community support for REST APIs and middleware

Secure RESTful APIs for:

Dashboard Data

Purchases

Transfers

Assignments

RBAC Middleware:

Check user roles via middleware before accessing routes

Token-based authentication (e.g., JWT) with role data embedded

API Logging:

Log every transaction (Create/Update/Delete):

Purchases

Transfers

Assignments

Log includes: timestamp, user ID, operation, old/new values

🧱 Database Design & Justification
Database Type: Relational Database –  MySQL

Justification:

Strong data consistency and referential integrity needed (e.g., tracking asset IDs across purchases, transfers, and assignments)

Complex relationships (Assets → Bases → Transfers → Assignments) are easier to model and query using SQL

Good support for transactional logging and ACID compliance

📦 Suggested Schema Design (Simplified):
plaintext
Copy
Edit
USERS
- id (PK)
- name
- email
- password_hash
- role (Admin | Commander | Logistics)

BASES
- id (PK)
- name
- location

ASSETS
- id (PK)
- type (Vehicle, Weapon, Ammo)
- description

STOCKS
- id (PK)
- base_id (FK)
- asset_id (FK)
- opening_balance
- closing_balance
- assigned
- expended

PURCHASES
- id (PK)
- asset_id (FK)
- base_id (FK)
- quantity
- purchase_date
- created_by (FK to USERS)

TRANSFERS
- id (PK)
- asset_id (FK)
- from_base_id (FK)
- to_base_id (FK)
- quantity
- transfer_date
- initiated_by (FK to USERS)

ASSIGNMENTS
- id (PK)
- asset_id (FK)
- base_id (FK)
- assigned_to (name or personnel_id)
- quantity
- assigned_date
- status (Assigned | Expended)

LOGS
- id (PK)
- user_id (FK)
- action_type (Purchase | Transfer | Assignment)
- resource_id
- old_data (JSON)
- new_data (JSON)
- timestamp
🔐 Security Features
Authentication: JWT-based login

Authorization: Role-based route protection

Encryption: Passwords hashed (e.g., bcrypt)

Audit Logging: All operations logged

Validation: Backend input validation (e.g., Joi or Zod)

📈 Bonus Enhancements (Optional):
Enable file uploads for asset documentation (PDFs, purchase bills, etc.)

Notifications or alerts for low stock or failed transfers

Graphs in dashboard (Net Movement trend, Asset Usage over time)

Export to Excel/PDF

🧪 Testing Requirements:
Unit testing for all backend routes (Jest + Supertest)

Integration testing for frontend API calls

Test coverage for all user roles and permission boundaries